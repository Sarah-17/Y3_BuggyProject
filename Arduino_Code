//Set up the username and password for the WAP
#include <WiFiNINA.h>
char ssid[] = "TeamY3"; 
char pass[] = "#icecream"; 

WiFiServer server(5200);
// Code to control the DC Motors using information from the IR Sensors

// pins connecting arduino to motors through hbridge
const int RMOTOR_1 = 9;
const int RMOTOR_2 = 10;
const int LMOTOR_1 = 6;
const int LMOTOR_2 = 5;

//IR sensors
const int LEYE = A4; 
const int REYE = A5;

//Ultrasonic sensors
const int US_TRIG = 3; //7;
const int US_ECHO = 4; //8;

//PID constants
double kp = 10;
double ki = 0.001;
double kd = kp/2;

unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output, setPoint;
double cumError, rateError;

char curr_state = 'n';
bool ismoving = false;
int distance;
int prev;
float currMillis;
float prevMillis = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

  //setup WiFi
  WiFi.beginAP(ssid, pass); 
  IPAddress ip = WiFi.localIP(); 
  Serial.print("IP Address:"); 
  Serial.println(ip);       //prints arduino's IP to connect the Processing client
  server.begin();

  //motors perform given information --- i.e. OUTPUT pins
  pinMode(LMOTOR_1, OUTPUT); 
  pinMode(LMOTOR_2, OUTPUT); 
  pinMode(RMOTOR_1, OUTPUT);
  pinMode(RMOTOR_2, OUTPUT);

  //IR sensors recieve information --- i.e. INPUT pins
  pinMode(LEYE, INPUT); 
  pinMode(REYE, INPUT);

  pinMode(US_TRIG, OUTPUT);
  pinMode(US_ECHO, INPUT);
  pinMode(2, INPUT_PULLUP);

  setPoint = 10; 
  prev = digitalRead(2);

}
int num;

void loop() {
  // put your main code here, to run repeatedly:

  WiFiClient client = server.available();
  char curr_state = client.read();

  if(curr_state == 'y'){
    ismoving = true;
  }
  else if(curr_state == 'n'){
    ismoving = false;
  }

  distance = ultra_poll();
  
  //Condition 1: if buggy is moving, stop buggy if close object is detected  
  if((distance < 10) && (ismoving))
  {   
    stop(); 
    server.write(10);
  }
  
  else
  {
    //Condition 2: If there is no object closeby, move buggy
    if(ismoving){

      server.write(30);

      input = analogRead(A0);                //read from rotary encoder connected to A0
      output = computePID(input);
      delay(100);


      if (digitalRead(LEYE) == HIGH && digitalRead(REYE) == HIGH || digitalRead(LEYE) == LOW && digitalRead(REYE) == LOW)
      {
        forward();
        if(distance > 30 && distance < 70) {
          analogWrite(LMOTOR_1, output+27);                //control the motor based on PID value
          analogWrite(RMOTOR_1, output);
        }
      }

      // if left detects black and right is white (ie. the line is to the right, we turn right to get it back in center)
      if (digitalRead(LEYE) == HIGH && digitalRead(REYE) == LOW) 
      {
        spin_right();
      }

      if (digitalRead(LEYE) == LOW && digitalRead(REYE) == HIGH)
      {
        spin_left();
      }
      
    }

    //Condition 3: If client request to stop, then stop buggy
    else{ 
       stop();
     }
  }
    

  //Reading from velocity of buggy from encoder 
  //Measuring velocity in cm/s

  if (digitalRead(2) != prev)
    {
    // Out puts velocity which is fed into processing
      currMillis = millis();
      float velocity = ((0.2127120026 * 100) / ((currMillis - prevMillis))); //cm/s
      Serial.println(velocity);
      Serial.println("--");
      prevMillis = currMillis;
      
      prev = digitalRead(2);
    }


}

//FUNCTIONS TO CONTROL MOTORS

//Motion controls: Control direction of the buggy
// Right motor is slightly slower than the left one due to friction/wear/etc... so we give it a higher voltage than the left one (ie its been calibrated)
void forward()
{
  analogWrite(LMOTOR_1, 207);
  analogWrite(LMOTOR_2, 0);
  analogWrite(RMOTOR_1, 180); 
  analogWrite(RMOTOR_2, 0);
}

void reverse()
{
  analogWrite(LMOTOR_1, 0);
  analogWrite(LMOTOR_2, 170);
  analogWrite(RMOTOR_1, 0);
  analogWrite(RMOTOR_2, 163);
}

void stop()
{
  analogWrite(LMOTOR_1, 0);
  analogWrite(LMOTOR_2, 0);
  analogWrite(RMOTOR_1, 0);
  analogWrite(RMOTOR_2, 0);
}

void spin_left()
{
  analogWrite(LMOTOR_1, 255);
  analogWrite(LMOTOR_2, 255);
  analogWrite(RMOTOR_1, 255);
  analogWrite(RMOTOR_2, 0);
}

void spin_right()
{
  analogWrite(LMOTOR_1, 255);
  analogWrite(LMOTOR_2, 0);
  analogWrite(RMOTOR_1, 255);
  analogWrite(RMOTOR_2, 255);
}

void turn_right()
{
  analogWrite(LMOTOR_1, 255);
  analogWrite(LMOTOR_2, 0);
  analogWrite(RMOTOR_1, 150);
  analogWrite(RMOTOR_2, 0);
}

void turn_left()
{
  analogWrite(LMOTOR_1, 150);
  analogWrite(LMOTOR_2, 0);
  analogWrite(RMOTOR_1, 255);
  analogWrite(RMOTOR_2, 0);
}

// Ultrasonic Contol: calculates distance between object detected and buggy's position
int ultra_poll()
{
  int dist;
  long duration;

  digitalWrite( US_TRIG, LOW );
  delayMicroseconds(2);
  digitalWrite( US_TRIG, HIGH );
  delayMicroseconds( 10 );
  digitalWrite( US_TRIG, LOW );

  duration = pulseIn( US_ECHO, HIGH );

  dist = duration/58;

  return dist;
}

//PID Control: adjust the speed of the buggy in reaction to speed of the object in front.
double computePID(double inp){     
  currentTime = millis();                             //get current time
  elapsedTime = (double)(currentTime - previousTime);        //compute time elapsed from previous computation
  
  error = setPoint - inp;                              // determine error
  cumError += error * elapsedTime;                  // compute integral
  rateError = (error - lastError)/elapsedTime;   // compute derivative

  double out = kp*error + ki*cumError + kd*rateError;        //PID output               

  lastError = error;                                //remember current error
  previousTime = currentTime;                        //remember current time

  return out;                                        //have function return the PID output
}

